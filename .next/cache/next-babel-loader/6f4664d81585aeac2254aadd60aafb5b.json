{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/teddylin/Desktop/harvard-houses/pages/comments/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport styles from './comments.module.css';\n\nvar CommentBox = /*#__PURE__*/function (_React$Component) {\n  _inherits(CommentBox, _React$Component);\n\n  var _super = _createSuper(CommentBox);\n\n  function CommentBox() {\n    var _this;\n\n    _classCallCheck(this, CommentBox);\n\n    _this = _super.call(this);\n    _this.state = {\n      showComments: false,\n      comments: [{\n        id: 1,\n        author: \"landiggity\",\n        body: \"This is my first comment on this forum so don't be a dick\"\n      }, {\n        id: 2,\n        author: \"scarlett-jo\",\n        body: \"That's a mighty fine comment you've got there my good looking fellow...\"\n      }, {\n        id: 3,\n        author: \"rosco\",\n        body: \"What is the meaning of all of this 'React' mumbo-jumbo?\"\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(CommentBox, [{\n    key: \"render\",\n    value: function render() {\n      var comments = this.getComments();\n      var commentNodes;\n      var buttonText = 'Show Comments';\n\n      if (this.state.showComments) {\n        buttonText = 'Hide Comments';\n        commentNodes = __jsx(\"div\", {\n          className: \"comment-list\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 22\n          }\n        }, comments);\n      }\n\n      return __jsx(\"div\", {\n        className: \"comment-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 7\n        }\n      }, __jsx(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }, \"Join the Discussion!\"), __jsx(CommentForm, {\n        addComment: this.addComment.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }\n      }), __jsx(\"button\", {\n        id: \"comment-reveal\",\n        onClick: this.handleClick.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      }, buttonText), __jsx(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }, \"Comments\"), __jsx(\"h4\", {\n        className: \"comment-count\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, this.getCommentsTitle(comments.length)), commentNodes);\n    } // end render\n\n  }, {\n    key: \"addComment\",\n    value: function addComment(author, body) {\n      var comment = {\n        id: this.state.comments.length + 1,\n        author: author,\n        body: body\n      };\n      this.setState({\n        comments: this.state.comments.concat([comment])\n      }); // *new array references help React stay fast, so concat works better than push here.\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.setState({\n        showComments: !this.state.showComments\n      });\n    }\n  }, {\n    key: \"getComments\",\n    value: function getComments() {\n      var _this2 = this;\n\n      return this.state.comments.map(function (comment) {\n        return __jsx(Comment, {\n          author: comment.author,\n          body: comment.body,\n          key: comment.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 9\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getCommentsTitle\",\n    value: function getCommentsTitle(commentCount) {\n      if (commentCount === 0) {\n        return 'No comments yet';\n      } else if (commentCount === 1) {\n        return \"1 comment\";\n      } else {\n        return \"\".concat(commentCount, \" comments\");\n      }\n    }\n  }]);\n\n  return CommentBox;\n}(React.Component); // end CommentBox component\n\n\nexport { CommentBox as default };\n\nvar CommentForm = /*#__PURE__*/function (_React$Component2) {\n  _inherits(CommentForm, _React$Component2);\n\n  var _super2 = _createSuper(CommentForm);\n\n  function CommentForm() {\n    _classCallCheck(this, CommentForm);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(CommentForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return __jsx(\"form\", {\n        className: \"comment-form\",\n        onSubmit: this.handleSubmit.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        className: \"comment-form-fields\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }, __jsx(\"input\", {\n        placeholder: \"Name\",\n        required: true,\n        ref: function ref(input) {\n          return _this3._author = input;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 92\n        }\n      }), __jsx(\"textarea\", {\n        placeholder: \"Comment\",\n        rows: \"4\",\n        required: true,\n        ref: function ref(textarea) {\n          return _this3._body = textarea;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      })), __jsx(\"div\", {\n        className: \"comment-form-actions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }, __jsx(\"button\", {\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }, \"Post Comment\")));\n    } // end render\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      event.preventDefault(); // prevents page from reloading on submit\n\n      var author = this._author;\n      var body = this._body;\n      this.props.addComment(author.value, body.value);\n    }\n  }]);\n\n  return CommentForm;\n}(React.Component); // end CommentForm component\n\n\nvar Comment = /*#__PURE__*/function (_React$Component3) {\n  _inherits(Comment, _React$Component3);\n\n  var _super3 = _createSuper(Comment);\n\n  function Comment() {\n    _classCallCheck(this, Comment);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(Comment, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"comment\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 7\n        }\n      }, __jsx(\"p\", {\n        className: \"comment-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }\n      }, this.props.author), __jsx(\"p\", {\n        className: \"comment-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }\n      }, this.props.body), __jsx(\"div\", {\n        className: \"comment-footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }, __jsx(\"a\", {\n        href: \"#\",\n        className: \"comment-footer-delete\",\n        onClick: this._deleteComment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }\n      }, \"Delete Comment\")));\n    }\n  }, {\n    key: \"_deleteComment\",\n    value: function _deleteComment() {\n      alert(\"-- DELETE Comment Functionality COMMING SOON...\");\n    }\n  }]);\n\n  return Comment;\n}(React.Component);","map":{"version":3,"sources":["/Users/teddylin/Desktop/harvard-houses/pages/comments/index.js"],"names":["React","styles","CommentBox","state","showComments","comments","id","author","body","getComments","commentNodes","buttonText","addComment","bind","handleClick","getCommentsTitle","length","comment","setState","concat","map","commentCount","Component","CommentForm","handleSubmit","input","_author","textarea","_body","event","preventDefault","props","value","Comment","_deleteComment","alert"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './comments.module.css';\n\nexport default class CommentBox extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      showComments: false,\n      comments: [\n        {id: 1, author: \"landiggity\", body: \"This is my first comment on this forum so don't be a dick\"},\n        {id: 2, author: \"scarlett-jo\", body: \"That's a mighty fine comment you've got there my good looking fellow...\"},\n        {id: 3, author: \"rosco\", body: \"What is the meaning of all of this 'React' mumbo-jumbo?\"}\n      ]\n    };\n  }\n\n  render () {\n    const comments = this.getComments();\n    let commentNodes;\n    let buttonText = 'Show Comments';\n\n    if (this.state.showComments) {\n      buttonText = 'Hide Comments';\n      commentNodes = <div className=\"comment-list\">{comments}</div>;\n    }\n\n    return(\n      <div className=\"comment-box\">\n        <h2>Join the Discussion!</h2>\n        <CommentForm addComment={this.addComment.bind(this)}/>\n        <button id=\"comment-reveal\" onClick={this.handleClick.bind(this)}>\n          {buttonText}\n        </button>\n        <h3>Comments</h3>\n        <h4 className=\"comment-count\">\n          {this.getCommentsTitle(comments.length)}\n        </h4>\n        {commentNodes}\n      </div>\n    );\n  } // end render\n\n  addComment(author, body) {\n    const comment = {\n      id: this.state.comments.length + 1,\n      author,\n      body\n    };\n    this.setState({ comments: this.state.comments.concat([comment]) }); // *new array references help React stay fast, so concat works better than push here.\n  }\n\n  handleClick() {\n    this.setState({\n      showComments: !this.state.showComments\n    });\n  }\n\n  getComments() {\n    return this.state.comments.map((comment) => {\n      return (\n        <Comment\n          author={comment.author}\n          body={comment.body}\n          key={comment.id} />\n      );\n    });\n  }\n\n  getCommentsTitle(commentCount) {\n    if (commentCount === 0) {\n      return 'No comments yet';\n    } else if (commentCount === 1) {\n      return \"1 comment\";\n    } else {\n      return `${commentCount} comments`;\n    }\n  }\n} // end CommentBox component\n\nclass CommentForm extends React.Component {\n  render() {\n    return (\n      <form className=\"comment-form\" onSubmit={this.handleSubmit.bind(this)}>\n        <div className=\"comment-form-fields\">\n          <input placeholder=\"Name\" required ref={(input) => this._author = input}></input><br />\n          <textarea placeholder=\"Comment\" rows=\"4\" required ref={(textarea) => this._body = textarea}></textarea>\n        </div>\n        <div className=\"comment-form-actions\">\n          <button type=\"submit\">Post Comment</button>\n        </div>\n      </form>\n    );\n  } // end render\n\n  handleSubmit(event) {\n    event.preventDefault();   // prevents page from reloading on submit\n    let author = this._author;\n    let body = this._body;\n    this.props.addComment(author.value, body.value);\n  }\n} // end CommentForm component\n\nclass Comment extends React.Component {\n  render () {\n    return(\n      <div className=\"comment\">\n        <p className=\"comment-header\">{this.props.author}</p>\n        <p className=\"comment-body\">{this.props.body}</p>\n        <div className=\"comment-footer\">\n          <a href=\"#\" className=\"comment-footer-delete\" onClick={this._deleteComment}>Delete Comment</a>\n        </div>\n      </div>\n    );\n  }\n  _deleteComment() {\n    alert(\"-- DELETE Comment Functionality COMMING SOON...\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}