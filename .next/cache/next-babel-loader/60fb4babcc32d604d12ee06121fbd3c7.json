{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/teddylin/Desktop/harvard-houses/pages/comments/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport styles from './comments.module.css';\n\nvar CommentBox = /*#__PURE__*/function (_React$Component) {\n  _inherits(CommentBox, _React$Component);\n\n  var _super = _createSuper(CommentBox);\n\n  function CommentBox() {\n    var _this;\n\n    _classCallCheck(this, CommentBox);\n\n    _this = _super.call(this);\n    _this.state = {\n      showComments: false,\n      comments: [{\n        id: 1,\n        author: \"coolboy\",\n        body: \"Eliot is cool\"\n      }, {\n        id: 2,\n        author: \"scarlett\",\n        body: \"Cabot has big rooms\"\n      }, {\n        id: 3,\n        author: \"Movie Star\",\n        body: \"Adams has rats.\"\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(CommentBox, [{\n    key: \"render\",\n    value: function render() {\n      var comments = this.getComments();\n      var commentNodes;\n      var buttonText = 'Show Comments';\n\n      if (this.state.showComments) {\n        buttonText = 'Hide Comments';\n        commentNodes = __jsx(\"div\", {\n          className: styles.commentlist,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 22\n          }\n        }, comments);\n      }\n\n      return __jsx(\"div\", {\n        className: styles.commentbox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 7\n        }\n      }, __jsx(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }, \"Join the Discussion!\"), __jsx(CommentForm, {\n        addComment: this.addComment.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }\n      }), __jsx(\"button\", {\n        className: styles.commentreveal,\n        onClick: this.handleClick.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      }, buttonText), __jsx(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }, \"Comments\"), __jsx(\"h4\", {\n        className: styles.commentcount,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, this.getCommentsTitle(comments.length)), commentNodes);\n    } // end render\n\n  }, {\n    key: \"addComment\",\n    value: function addComment(author, body) {\n      var comment = {\n        id: this.state.comments.length + 1,\n        author: author,\n        body: body\n      };\n      this.setState({\n        comments: this.state.comments.concat([comment])\n      }); // *new array references help React stay fast, so concat works better than push here.\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.setState({\n        showComments: !this.state.showComments\n      });\n    }\n  }, {\n    key: \"getComments\",\n    value: function getComments() {\n      var _this2 = this;\n\n      return this.state.comments.map(function (comment) {\n        return __jsx(Comment, {\n          author: comment.author,\n          body: comment.body,\n          key: comment.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 9\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getCommentsTitle\",\n    value: function getCommentsTitle(commentCount) {\n      if (commentCount === 0) {\n        return 'No comments yet';\n      } else if (commentCount === 1) {\n        return \"1 comment\";\n      } else {\n        return \"\".concat(commentCount, \" comments\");\n      }\n    }\n  }]);\n\n  return CommentBox;\n}(React.Component); // end CommentBox component\n\n\nexport { CommentBox as default };\n\nvar CommentForm = /*#__PURE__*/function (_React$Component2) {\n  _inherits(CommentForm, _React$Component2);\n\n  var _super2 = _createSuper(CommentForm);\n\n  function CommentForm() {\n    _classCallCheck(this, CommentForm);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(CommentForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return __jsx(\"form\", {\n        className: styles.commentform,\n        onSubmit: this.handleSubmit.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        className: styles.commentformfields,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }, __jsx(\"input\", {\n        placeholder: \"Name\",\n        required: true,\n        ref: function ref(input) {\n          return _this3.author = input;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 91\n        }\n      }), __jsx(\"textarea\", {\n        placeholder: \"Comment\",\n        rows: \"4\",\n        required: true,\n        ref: function ref(textarea) {\n          return _this3.body = textarea;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      })), __jsx(\"div\", {\n        className: styles.commentformactions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }, __jsx(\"button\", {\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }, \"Post Comment\")));\n    } // end render\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      event.preventDefault(); // prevents page from reloading on submit\n\n      var author = this.author;\n      var body = this.body;\n      this.props.addComment(author.value, body.value);\n    }\n  }]);\n\n  return CommentForm;\n}(React.Component); // end CommentForm component\n\n\nvar Comment = /*#__PURE__*/function (_React$Component3) {\n  _inherits(Comment, _React$Component3);\n\n  var _super3 = _createSuper(Comment);\n\n  function Comment() {\n    _classCallCheck(this, Comment);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(Comment, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: styles.comment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 7\n        }\n      }, __jsx(\"p\", {\n        className: styles.commentheader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }\n      }, this.props.author), __jsx(\"p\", {\n        className: styles.commentbody,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }\n      }, this.props.body), __jsx(\"div\", {\n        className: styles.commentfooter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }, __jsx(\"a\", {\n        href: \"#\",\n        className: styles.commentfooterdelete,\n        onClick: this.deleteComment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }\n      }, \"Delete Comment\")));\n    }\n  }, {\n    key: \"deleteComment\",\n    value: function deleteComment() {\n      alert(\" DELETE Comment Functionality COMMING SOON...\");\n    }\n  }]);\n\n  return Comment;\n}(React.Component);","map":{"version":3,"sources":["/Users/teddylin/Desktop/harvard-houses/pages/comments/index.js"],"names":["React","styles","CommentBox","state","showComments","comments","id","author","body","getComments","commentNodes","buttonText","commentlist","commentbox","addComment","bind","commentreveal","handleClick","commentcount","getCommentsTitle","length","comment","setState","concat","map","commentCount","Component","CommentForm","commentform","handleSubmit","commentformfields","input","textarea","commentformactions","event","preventDefault","props","value","Comment","commentheader","commentbody","commentfooter","commentfooterdelete","deleteComment","alert"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './comments.module.css';\n\nexport default class CommentBox extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      showComments: false,\n      comments: [\n        {id: 1, author: \"coolboy\", body: \"Eliot is cool\"},\n        {id: 2, author: \"scarlett\", body: \"Cabot has big rooms\"},\n        {id: 3, author: \"Movie Star\", body: \"Adams has rats.\"}\n      ]\n    };\n  }\n\n  render () {\n    const comments = this.getComments();\n    let commentNodes;\n    let buttonText = 'Show Comments';\n\n    if (this.state.showComments) {\n      buttonText = 'Hide Comments';\n      commentNodes = <div className={styles.commentlist}>{comments}</div>;\n    }\n\n    return(\n      <div className={styles.commentbox}>\n        <h2>Join the Discussion!</h2>\n        <CommentForm addComment={this.addComment.bind(this)}/>\n        <button className={styles.commentreveal} onClick={this.handleClick.bind(this)}>\n          {buttonText}\n        </button>\n        <h3>Comments</h3>\n        <h4 className={styles.commentcount}>\n          {this.getCommentsTitle(comments.length)}\n        </h4>\n        {commentNodes}\n      </div>\n    );\n  } // end render\n\n  addComment(author, body) {\n    const comment = {\n      id: this.state.comments.length + 1,\n      author,\n      body\n    };\n    this.setState({ comments: this.state.comments.concat([comment]) }); // *new array references help React stay fast, so concat works better than push here.\n  }\n\n  handleClick() {\n    this.setState({\n      showComments: !this.state.showComments\n    });\n  }\n\n  getComments() {\n    return this.state.comments.map((comment) => {\n      return (\n        <Comment\n          author={comment.author}\n          body={comment.body}\n          key={comment.id} />\n      );\n    });\n  }\n\n  getCommentsTitle(commentCount) {\n    if (commentCount === 0) {\n      return 'No comments yet';\n    } else if (commentCount === 1) {\n      return \"1 comment\";\n    } else {\n      return `${commentCount} comments`;\n    }\n  }\n} // end CommentBox component\n\nclass CommentForm extends React.Component {\n  render() {\n    return (\n      <form className={styles.commentform} onSubmit={this.handleSubmit.bind(this)}>\n        <div className={styles.commentformfields}>\n          <input placeholder=\"Name\" required ref={(input) => this.author = input}></input><br />\n          <textarea placeholder=\"Comment\" rows=\"4\" required ref={(textarea) => this.body = textarea}></textarea>\n        </div>\n        <div className={styles.commentformactions}>\n          <button type=\"submit\">Post Comment</button>\n        </div>\n      </form>\n    );\n  } // end render\n\n  handleSubmit(event) {\n    event.preventDefault();   // prevents page from reloading on submit\n    let author = this.author;\n    let body = this.body;\n    this.props.addComment(author.value, body.value);\n  }\n} // end CommentForm component\n\nclass Comment extends React.Component {\n  render () {\n    return(\n      <div className={styles.comment}>\n        <p className={styles.commentheader}>{this.props.author}</p>\n        <p className={styles.commentbody}>{this.props.body}</p>\n        <div className={styles.commentfooter}>\n          <a href=\"#\" className={styles.commentfooterdelete} onClick={this.deleteComment}>Delete Comment</a>\n        </div>\n      </div>\n    );\n  }\n  deleteComment() {\n    alert(\" DELETE Comment Functionality COMMING SOON...\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}